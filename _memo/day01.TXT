JSP(Java Server Page)
	HTML을 중심으로 자바와 같이 연동하여 사용하는 웹 언어이다.
	HTML 코드 안에 JAVA 코드를 작성할 수 있는 언어이다.

서버
	사용자의 요청에 맞는 서비스를 제공해주는 것
	- 요청(request) : 클라이언트 -> 서버
	- 응답(response) : 서버 -> 클라이언트

웹(Web)
	페이지 요청과 응답이 일어나는 장소.
	인터넷에 연결된 컴퓨터들을 통해 사람들이 정보를 공유할 수 있는 정보공간

웹 서버(http) - 아파치
	사용자의 요청이 정적 데이터인지 동적 데이터인지 판단한다.
	정적 데이터일 경우 이미 준비된 HTML문서를 그대로 응답해주며,
	동적 데이터라면 웹 컨테이너에 요청을 보낸다.

웹 컨테이너(서블릿 컨테이너)
	동적 데이터일 경우 JSP, 서블릿으로 연산 및 제어 그리고 DB까지 접근한다.
	DB에 접근하는 연산을 복잡한 연산이라고 하며, JAVA로 처리한다.
	동적 데이터가 정제된 데이터(정적 데이터)로 완성되면 이를 웹 서버로 응답해준다.

WAS(Web Application Server) - 톰캣
	동적 데이터를 처리할 서블릿을 메모리에 할당하며, web.xml을 참조한 뒤 알맞는 서블릿에 대한 Thread를 생성한다.
	서블릿 요청과 서블릿 응답 객체 생성 후 서블릿에 전달하면,
	연산 종료 후 메모리에서 해제시킨다.

서블릿(Sevlet)
	Java 코드 안에 HTML 코드를 작성할 수 있는 Java 프로그램이다.
	Thread에 의해 서블릿에 있는 service() 메소드가 호출된다.
	전송 방식 요청에 맞게 doGet() 또는 doPost() 등의 메소드를 호출한다.

========================================================================================

web.xml을 프로젝트별로 새로 만드는 이유
	- 공용 web.xml만 사용하면 프로젝트별로 충돌이 날 수 있기 때문에 공용이 아닌 개별적으로 만들어준다.
	  → 쉽게 말해, 개별적으로 특이사항이 생길 수 있는데 그것을 공용 web.xml에서 수정을 하게 되면 다른 프로젝트에서 충돌이 날 수 있어서
	      개별적으로 수정을 해준다.
	- 혹시 프로젝트 만들 때 web.xml을 생성하지 못했다면 
	   Java EE Tools > Generate Deployment Descriptor Stub 선택하면 됨


Java Resources에 자바 파일을 만드는데, class가 아닌 Sevlet 파일을 만든다.
URL mapping 	-> URL 검색
		-> URL mapping에 기재한 주소가 a태그의 href 형태로 나타난다. 
		    유저 요청 시 해당 태그가 실제 경로가 아니기 때문에 자바의 경로를 찾아 동적 데이터임을 파악하게 된다.

web.xml 설정은 xml파일에서 직접하거나, 어노테이션(@)을 써서 하는 것 두 가지 방법이 있다.
직렬화: private static final long serialVersionUID = 1L;
HTML을 만드는 것(body 태그에 뭔가를 작성할 수 있게 해주는 메소드): getWriter()
contextPath: root 경로까지

메인페이지(시작페이지, 처음 나오는 페이지)는 항상 index.jsp로 만든다. -> web.xml에 들어가보면 welcome-file이 index.html 로 이미 설정되어있음
welcome-file은 경로만 적어도 첫 페이지가 나오도록 하는 것을 말한다.

404 에러 - web.xml 문제 또는 어노테이션 문제라는 것

========================================================================================

[계산기 만들기 실습]
1. calc.jsp, Oper.java(서블릿), Calc.java(클래스) 생성
2. calc.jsp에서 input태그로 수식 통채로를 입력받고 action은 Oper서블릿으로 설정해준다. ->calc.jsp 에서 Oper서블릿으로 가야한다.
3. Calc.java 클래스에서 사칙연산 메소드를 정의하고 모두 두 정수를 전달받은 후 int로 리턴해준다.
4. 나눗셈 메소드에서는 분모가 0일 경우를 처리하지 않고 Oper.java 서블릿에서 나눗셈 메소드 사용 시 예외를 처리한다.
5. Oper.java 서블릿에서 전달받은 수식을 분석한 후 사칙연산 연산자에 맞게 Calc.java의 메소드를 호출하여 결과를 응답한다.
   ※ request.getParameter("태그의 name 속성 값")으로 전달받은 값을 가져올 수 있다.
   ※ 연산자를 split()으로 분리할 때에는 split("\\" + 연산자)로 사용해야 분리된다. (예) split("\\+")
   ※ 잘못 입력했을 때와 0으로 나눌 때 모두 예외처리를 사용하여 알맞는 메세지를 출력해준다.
6. Oper.java 서블릿에서 calc.jsp로 돌아갈 때에는 calc.jsp가 아닌 calc로 이동할 수 있도록 web.xml에서 servlet을 설정한다.










